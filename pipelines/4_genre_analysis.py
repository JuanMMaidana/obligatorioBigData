#!/usr/bin/env python3
"""
Pipeline 4: An√°lisis de G√©neros Cinematogr√°ficos
================================================

Este script implementa un an√°lisis adicional de g√©neros cinematogr√°ficos
para complementar los KPIs existentes del Data Lake.

An√°lisis Incluidos:
- ROI por g√©nero cinematogr√°fico
- Evoluci√≥n de g√©neros por d√©cada
- Relaci√≥n g√©nero vs presupuesto
- G√©neros m√°s rentables por per√≠odo
"""

from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.sql.types import *
import json
import os

def create_spark_session():
    """
    Crea una sesi√≥n de Spark configurada para el procesamiento de datos.
    
    Returns:
        SparkSession: Sesi√≥n de Spark configurada
    """
    return SparkSession.builder \
        .appName("MovieDataLake-GenreAnalysis") \
        .config("spark.sql.adaptive.enabled", "true") \
        .config("spark.sql.adaptive.coalescePartitions.enabled", "true") \
        .getOrCreate()

def extract_genres_from_master(spark):
    """
    Extrae y procesa g√©neros desde el dataset maestro.
    
    Args:
        spark (SparkSession): Sesi√≥n de Spark
        
    Returns:
        DataFrame: DataFrame con g√©neros extra√≠dos
    """
    print("üé≠ Extrayendo g√©neros cinematogr√°ficos...")
    
    # Leer dataset maestro
    master_df = spark.read.parquet("datalake/refined/movies_master.parquet")
    
    # Funci√≥n UDF para extraer g√©neros del JSON
    def extract_genres(genres_str):
        try:
            if genres_str and genres_str != '[]':
                genres_data = json.loads(genres_str.replace("'", '"'))
                if isinstance(genres_data, list):
                    return [genre.get('name', '') for genre in genres_data if genre.get('name')]
                return []
            return []
        except:
            return []
    
    extract_genres_udf = udf(extract_genres, ArrayType(StringType()))
    
    # Extraer g√©neros y crear filas separadas para cada g√©nero
    movies_with_genres = master_df.withColumn("genres", extract_genres_udf(col("genres")))
    
    # Explotar g√©neros (crear una fila por cada g√©nero)
    exploded_genres = movies_with_genres.select(
        "id", "title", "director", "budget", "revenue", "profit", "roi", 
        "release_year", "release_date", explode("genres").alias("genre")
    ).filter(col("genre") != "")
    
    print(f"üìä Registros con g√©neros extra√≠dos: {exploded_genres.count()}")
    print(f"üé¨ G√©neros √∫nicos encontrados: {exploded_genres.select('genre').distinct().count()}")
    
    return exploded_genres

def create_genre_performance_kpis(genres_df):
    """
    Crea KPIs de rendimiento por g√©nero.
    
    Args:
        genres_df (DataFrame): DataFrame con g√©neros extra√≠dos
        
    Returns:
        DataFrame: KPIs de rendimiento por g√©nero
    """
    print("üìä Creando KPIs de rendimiento por g√©nero...")
    
    # Agrupar por g√©nero y calcular m√©tricas
    genre_performance = genres_df.groupBy("genre") \
        .agg(
            count("id").alias("numero_peliculas"),
            avg("roi").alias("roi_promedio"),
            sum("profit").alias("ganancia_total"),
            avg("budget").alias("presupuesto_promedio"),
            avg("revenue").alias("recaudacion_promedio"),
            sum("revenue").alias("recaudacion_total"),
            avg("profit").alias("ganancia_promedio")
        )
    
    # Filtrar g√©neros con relevancia estad√≠stica (5 o m√°s pel√≠culas)
    genre_performance_filtered = genre_performance.filter(
        col("numero_peliculas") >= 5
    )
    
    # Redondear valores
    genre_performance_final = genre_performance_filtered.withColumn(
        "roi_promedio", round(col("roi_promedio"), 3)
    ).withColumn(
        "ganancia_total", round(col("ganancia_total"), 2)
    ).withColumn(
        "presupuesto_promedio", round(col("presupuesto_promedio"), 2)
    ).withColumn(
        "recaudacion_promedio", round(col("recaudacion_promedio"), 2)
    ).withColumn(
        "recaudacion_total", round(col("recaudacion_total"), 2)
    ).withColumn(
        "ganancia_promedio", round(col("ganancia_promedio"), 2)
    )
    
    # Ordenar por ROI promedio descendente
    genre_performance_final = genre_performance_final.orderBy(desc("roi_promedio"))
    
    print(f"üìä G√©neros con relevancia estad√≠stica: {genre_performance_final.count()}")
    
    return genre_performance_final

def create_genre_decade_analysis(genres_df):
    """
    Crea an√°lisis de g√©neros por d√©cada.
    
    Args:
        genres_df (DataFrame): DataFrame con g√©neros extra√≠dos
        
    Returns:
        DataFrame: An√°lisis de g√©neros por d√©cada
    """
    print("üìÖ Creando an√°lisis de g√©neros por d√©cada...")
    
    # Crear columna de d√©cada
    genres_with_decade = genres_df.withColumn(
        "decade", 
        concat(
            floor(col("release_year") / 10) * 10,
            lit("-"),
            floor(col("release_year") / 10) * 10 + 9
        )
    )
    
    # Agrupar por g√©nero y d√©cada
    genre_decade_analysis = genres_with_decade.groupBy("genre", "decade") \
        .agg(
            count("id").alias("numero_peliculas"),
            avg("roi").alias("roi_promedio"),
            sum("profit").alias("ganancia_total"),
            avg("budget").alias("presupuesto_promedio"),
            sum("revenue").alias("recaudacion_total")
        )
    
    # Redondear valores
    genre_decade_final = genre_decade_analysis.withColumn(
        "roi_promedio", round(col("roi_promedio"), 3)
    ).withColumn(
        "ganancia_total", round(col("ganancia_total"), 2)
    ).withColumn(
        "presupuesto_promedio", round(col("presupuesto_promedio"), 2)
    ).withColumn(
        "recaudacion_total", round(col("recaudacion_total"), 2)
    )
    
    # Ordenar por d√©cada y g√©nero
    genre_decade_final = genre_decade_final.orderBy("decade", desc("roi_promedio"))
    
    print(f"üìä Combinaciones g√©nero-d√©cada: {genre_decade_final.count()}")
    
    return genre_decade_final

def create_genre_budget_analysis(genres_df):
    """
    Crea an√°lisis de relaci√≥n g√©nero vs presupuesto.
    
    Args:
        genres_df (DataFrame): DataFrame con g√©neros extra√≠dos
        
    Returns:
        DataFrame: An√°lisis de g√©nero vs presupuesto
    """
    print("üí∞ Creando an√°lisis de g√©nero vs presupuesto...")
    
    # Crear rangos de presupuesto
    genres_with_budget_range = genres_df.withColumn(
        "budget_range",
        when(col("budget") < 10000000, "Bajo (< $10M")
        .when(col("budget") < 50000000, "Medio ($10M-$50M")
        .when(col("budget") < 100000000, "Alto ($50M-$100M")
        .otherwise("Muy Alto (> $100M")
    )
    
    # Agrupar por g√©nero y rango de presupuesto
    genre_budget_analysis = genres_with_budget_range.groupBy("genre", "budget_range") \
        .agg(
            count("id").alias("numero_peliculas"),
            avg("roi").alias("roi_promedio"),
            avg("budget").alias("presupuesto_promedio"),
            sum("profit").alias("ganancia_total")
        )
    
    # Redondear valores
    genre_budget_final = genre_budget_analysis.withColumn(
        "roi_promedio", round(col("roi_promedio"), 3)
    ).withColumn(
        "presupuesto_promedio", round(col("presupuesto_promedio"), 2)
    ).withColumn(
        "ganancia_total", round(col("ganancia_total"), 2)
    )
    
    # Ordenar por g√©nero y rango de presupuesto
    genre_budget_final = genre_budget_final.orderBy("genre", "budget_range")
    
    print(f"üìä Combinaciones g√©nero-presupuesto: {genre_budget_final.count()}")
    
    return genre_budget_final

def save_genre_analysis(genre_performance_df, genre_decade_df, genre_budget_df):
    """
    Guarda los an√°lisis de g√©neros en la zona CURATED.
    
    Args:
        genre_performance_df (DataFrame): KPIs de rendimiento por g√©nero
        genre_decade_df (DataFrame): An√°lisis de g√©neros por d√©cada
        genre_budget_df (DataFrame): An√°lisis de g√©nero vs presupuesto
    """
    print("üíæ Guardando an√°lisis de g√©neros en zona CURATED...")
    
    # Guardar rendimiento por g√©nero
    genre_perf_output = "datalake/curated/genre_performance.parquet"
    genre_performance_df.write \
        .mode("overwrite") \
        .option("compression", "snappy") \
        .parquet(genre_perf_output)
    
    print(f"‚úÖ Rendimiento por g√©nero guardado en: {genre_perf_output}")
    
    # Guardar an√°lisis por d√©cada
    genre_decade_output = "datalake/curated/genre_decade_analysis.parquet"
    genre_decade_df.write \
        .mode("overwrite") \
        .option("compression", "snappy") \
        .parquet(genre_decade_output)
    
    print(f"‚úÖ An√°lisis por d√©cada guardado en: {genre_decade_output}")
    
    # Guardar an√°lisis de presupuesto
    genre_budget_output = "datalake/curated/genre_budget_analysis.parquet"
    genre_budget_df.write \
        .mode("overwrite") \
        .option("compression", "snappy") \
        .parquet(genre_budget_output)
    
    print(f"‚úÖ An√°lisis de presupuesto guardado en: {genre_budget_output}")

def display_genre_insights(genre_performance_df, genre_decade_df, genre_budget_df):
    """
    Muestra insights clave sobre g√©neros cinematogr√°ficos.
    
    Args:
        genre_performance_df (DataFrame): KPIs de rendimiento por g√©nero
        genre_decade_df (DataFrame): An√°lisis de g√©neros por d√©cada
        genre_budget_df (DataFrame): An√°lisis de g√©nero vs presupuesto
    """
    print("\nüé≠ INSIGHTS CLAVE DE G√âNEROS CINEMATOGR√ÅFICOS")
    print("=" * 60)
    
    # Top 5 g√©neros por ROI
    print("\nüèÜ TOP 5 G√âNEROS POR ROI:")
    top_genres = genre_performance_df.limit(5).collect()
    for i, row in enumerate(top_genres, 1):
        print(f"   {i}. {row['genre']} - ROI: {row['roi_promedio']:.1%} ({row['numero_peliculas']} pel√≠culas)")
    
    # G√©nero m√°s prol√≠fico
    most_prolific_genre = genre_performance_df.orderBy(desc("numero_peliculas")).first()
    print(f"\nüìΩÔ∏è  G√âNERO M√ÅS PROL√çFICO: {most_prolific_genre['genre']} ({most_prolific_genre['numero_peliculas']} pel√≠culas)")
    
    # G√©nero con mayor ganancia total
    highest_profit_genre = genre_performance_df.orderBy(desc("ganancia_total")).first()
    print(f"üí∞ G√âNERO CON MAYOR GANANCIA TOTAL: {highest_profit_genre['genre']} (${highest_profit_genre['ganancia_total']:,.0f})")
    
    # G√©nero con mayor presupuesto promedio
    highest_budget_genre = genre_performance_df.orderBy(desc("presupuesto_promedio")).first()
    print(f"üí∏ G√âNERO CON MAYOR PRESUPUESTO: {highest_budget_genre['genre']} (${highest_budget_genre['presupuesto_promedio']:,.0f} promedio)")

def main():
    """
    Funci√≥n principal que ejecuta el an√°lisis de g√©neros.
    """
    print("üöÄ Iniciando Pipeline 4: An√°lisis de G√©neros Cinematogr√°ficos")
    print("=" * 70)
    
    # Crear sesi√≥n de Spark
    spark = create_spark_session()
    
    try:
        # Crear directorios de salida si no existen
        os.makedirs("datalake/curated", exist_ok=True)
        
        # Paso 1: Extraer g√©neros desde el dataset maestro
        genres_df = extract_genres_from_master(spark)
        
        # Paso 2: Crear KPIs de rendimiento por g√©nero
        genre_performance_df = create_genre_performance_kpis(genres_df)
        
        # Paso 3: Crear an√°lisis de g√©neros por d√©cada
        genre_decade_df = create_genre_decade_analysis(genres_df)
        
        # Paso 4: Crear an√°lisis de g√©nero vs presupuesto
        genre_budget_df = create_genre_budget_analysis(genres_df)
        
        # Paso 5: Guardar an√°lisis de g√©neros
        save_genre_analysis(genre_performance_df, genre_decade_df, genre_budget_df)
        
        # Paso 6: Mostrar insights de g√©neros
        display_genre_insights(genre_performance_df, genre_decade_df, genre_budget_df)
        
        print("\nüéâ An√°lisis de g√©neros completado exitosamente!")
        print("üìÅ Productos de datos creados en zona CURATED:")
        print("   ‚Ä¢ genre_performance.parquet - Rendimiento por g√©nero")
        print("   ‚Ä¢ genre_decade_analysis.parquet - An√°lisis por d√©cada")
        print("   ‚Ä¢ genre_budget_analysis.parquet - An√°lisis de presupuesto")
        print("üé≠ Insights listos para visualizaci√≥n y an√°lisis")
        
    except Exception as e:
        print(f"‚ùå Error durante el an√°lisis de g√©neros: {str(e)}")
        raise
    
    finally:
        # Cerrar sesi√≥n de Spark
        spark.stop()

if __name__ == "__main__":
    main() 